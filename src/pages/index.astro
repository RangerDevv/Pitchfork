---
import Layout from '../layouts/Layout.astro';

import { update_await_block_branch } from 'svelte/internal';
import {appwriteDatabases , Products,ProductList , appwriteStorage, appwriteUser , PitchList} from '../lib/appwrite';

import UpvoteBtn from '../components/upvoteBtn.svelte';

import { Client,Storage,Query } from 'appwrite';

export const client = new Client();
export const storage = new Storage(client);

let userid = Astro.cookies.get('user').value;

client
.setEndpoint('https://cloud.appwrite.io/v1')
.setProject('646538bf8be3792191bd');
  
const entries = (await appwriteDatabases.listDocuments(
	'646538e35dd17306c589',
	'646538eeeface7a4cd39',
	[
		Query.orderAsc('LaunchDate'),
	]
)) as ProductList;

const pitches = (await appwriteDatabases.listDocuments(
	'646b9dd716753e384863',
	'646b9e0e29b66e4a8a22',
)) as PitchList;

console.log(entries);

const today = new Date(); // Get the current date
const formattedToday = new Date(today.getTime() - today.getTimezoneOffset()*60000).toISOString().slice(0, 10)

console.log(formattedToday);

const todayPosts = entries.documents
  .filter((post) => {
	console.log(post.LaunchDate);
	const postDate = new Date(post.LaunchDate.slice(0,-6));
 console.log(postDate);
 console.log('-----');
    const formattedPostDate = postDate.toISOString().slice(0, 10); // Format the date as "YYYY-MM-DD"
    return formattedPostDate === formattedToday; // Filter posts with matching formatted date
  })
  .sort((a, b) => b.Upvotes.length - a.Upvotes.length);

const posts = entries.documents.sort(
  // sort the posts based on the number of upvotes
  (a, b) => b.Upvotes.length - a.Upvotes.length
);

function shufflePosts() {
  // Shuffle the posts array using the Fisher-Yates algorithm
  for (let i = todayPosts.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [todayPosts[i], todayPosts[j]] = [todayPosts[j], todayPosts[i]];
  }
}

// Initial shuffle
shufflePosts();

// Shuffle the posts every 2 hours
setInterval(() => {
  shufflePosts();
}, 2 * 60 * 60 * 1000); // 2 hours in milliseconds

const todayPitch = pitches.documents
  .filter((pitches) => {
	console.log(pitches.LaunchDate);
	const postDate = new Date(pitches.LaunchDate.slice(0,-6));
 console.log('PitchDate: '+postDate);
 console.log('-----');
	const formattedPostDate = postDate.toISOString().slice(0, 10); // Format the date as "YYYY-MM-DD"
	return formattedPostDate === formattedToday; // Filter posts with matching formatted date
  })
  .sort((a, b) => b.Upvotes.length - a.Upvotes.length);


---
<Layout title="Pitchfork">
	<main class="p-5 sm:p-10">
		<!--  sort the posts based on if it was posted today or not -->
		<h1 class="text-white text-center mb-5 text-2xl font-normal">Today</h1>
		<div class="flex flex-wrap items-center flex-row gap-5">
			{todayPosts.map((todayPosts)=> (
								<div class="flex flex-col gap-3 bg-slate-800 rounded-xl w-96 p-3">
				<a class="" href={'/post/'+todayPosts.$id}>
				<div class="flex flex-col gap-3">
					<img src={'https://cloud.appwrite.io/v1/storage/buckets/64661e622715cf602c83/files/'+todayPosts.Thumbnail+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-auto h-52" />
					<div class="flex">
					<img src={'https://cloud.appwrite.io/v1/storage/buckets/646547f5019189c8092b/files/'+todayPosts.Icon+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-24 h-auto" />
					<div class="pl-2">
						<p class="text-lg">{todayPosts.Name}</p>
						<p class="text-md">{todayPosts.Tagline}</p>
						{todayPosts.Free && <p class=" text-sm text-gray-400">Free</p> || <p class=" text-sm text-gray-400">Paid/Has Paid Options</p>}
						<p class="text-xs text-gray-400">By: {todayPosts.Author}</p>
					</div>
					</div>
				</div>
				</a>
				<UpvoteBtn client:only="svelte" DatabaseID="646538e35dd17306c589" CollectionID="646538eeeface7a4cd39" DocumentID={todayPosts.$id} uid={userid} />
				</div>
			))}
			<!--  if the TodayPost array is empty, display a message -->
			{todayPosts.length === 0 && (
				<div class="flex flex-col gap-3 bg-slate-800 rounded-xl w-96 p-3">
					<p class="text-white text-center">No posts today ðŸ˜­ create your own <a href="/create" class="text-blue-500">here</a></p>
				</div>
			)}
		</div>
		<h1 class="text-white text-center mb-5 text-2xl font-normal">New Pitches</h1>
		{todayPitch.map((todayPitch)=> (
			<div class="flex flex-col gap-3 bg-slate-800 rounded-xl w-96 p-3">
			<a class="" href={'/post/'+todayPitch.$id}>
			<div class="flex flex-col gap-3">
			<img src={'https://cloud.appwrite.io/v1/storage/buckets/64661e622715cf602c83/files/'+todayPitch.Thumbnail+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-auto h-52" />
			<div class="flex">
			<img src={'https://cloud.appwrite.io/v1/storage/buckets/646547f5019189c8092b/files/'+todayPitch.Icon+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-24 h-auto" />
			<div class="pl-2">
				<p class="text-lg">{todayPitch.Name}</p>
				<p class="text-md">{todayPitch.Tagline}</p>
				{todayPitch.Free && <p class=" text-sm text-gray-400">Free</p> || <p class=" text-sm text-gray-400">Paid/Has Paid Options</p>}
				<p class="text-xs text-gray-400">By: {todayPitch.Author}</p>
			</div>
			</div>
			</div>
			</a>
			<UpvoteBtn client:only="svelte" DatabaseID="646538e35dd17306c589" CollectionID="646538eeeface7a4cd39" DocumentID={todayPitch.$id} uid={userid} />
			</div>
			))}
			<!--  if the TodayPost array is empty, display a message -->
			{todayPitch.length === 0 && (
			<div class="flex flex-col gap-3 bg-slate-800 rounded-xl w-96 p-3">
			<p class="text-white text-center">No posts today ðŸ˜­ create your own <a href="/create" class="text-blue-500">here</a></p>
			</div>
			)}
		<h1 class="text-white text-center mb-5 text-2xl font-normal">Top Posts</h1>
		<div class="flex flex-wrap items-center flex-row gap-5">
			{posts.map((posts)=> (
			<div class="flex flex-col gap-3 bg-slate-800 rounded-xl w-96 p-3">
				<a class="" href={'/post/'+posts.$id}>
				<div class="flex flex-col gap-3">
					<img src={'https://cloud.appwrite.io/v1/storage/buckets/64661e622715cf602c83/files/'+posts.Thumbnail+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-auto h-52" />
					<div class="flex">
					<img src={'https://cloud.appwrite.io/v1/storage/buckets/646547f5019189c8092b/files/'+posts.Icon+'/preview?project=646538bf8be3792191bd'} alt="image" class="w-24 h-auto" />
					<div class="pl-2">
						<p class="text-lg">{posts.Name}</p>
						<p class="text-md">{posts.Tagline}</p>
						{posts.Free && <p class=" text-sm text-gray-400">Free</p> || <p class=" text-sm text-gray-400">Paid/Has Paid Options</p>}
						<p class="text-xs text-gray-400">By: {posts.Author}</p>
					</div>
					</div>
				</div>
				</a>
				<UpvoteBtn client:only="svelte" DatabaseID="646538e35dd17306c589" CollectionID="646538eeeface7a4cd39" DocumentID={posts.$id} uid={userid} />
				</div>
			))}
		</div>
	</main>
</Layout>

<style>
	main {
		margin: auto;
	}

	h1 {
		font-size: 3rem;
		font-weight: 800;
		margin: 0;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		line-height: 1.6;
		margin: 1rem 0;
		border: 1px solid rgba(var(--accent), 25%);
		background-color: white;
		padding: 1rem;
		border-radius: 0.4rem;
	}
	.instructions code {
		font-size: 0.875em;
		font-weight: bold;
		background: rgba(var(--accent), 12%);
		color: rgb(var(--accent));
		border-radius: 4px;
		padding: 0.3em 0.45em;
	}
	.instructions strong {
		color: rgb(var(--accent));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 1rem;
		padding: 0;
	}
</style>
